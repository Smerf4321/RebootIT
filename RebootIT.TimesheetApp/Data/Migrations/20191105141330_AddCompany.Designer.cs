// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RebootIT.TimesheetApp.Data;

namespace RebootIT.TimesheetApp.Data.Migrations
{
    [DbContext(typeof(TimesheetDbContext))]
    [Migration("20191105141330_AddCompany")]
    partial class AddCompany
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RebootIT.TimesheetApp.Data.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillingAddress")
                        .IsRequired();

                    b.Property<string>("CompanyName")
                        .IsRequired();

                    b.Property<string>("ContactEmail")
                        .IsRequired();

                    b.Property<string>("ContactName")
                        .IsRequired();

                    b.Property<string>("ContactTelephone")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new { Id = 1, BillingAddress = "3 Hopeless Lane, Fiddler District, Middlesbrough", CompanyName = "Fiddler Fingers", ContactEmail = "fw@example.com", ContactName = "Free Willy", ContactTelephone = "01234 121212" },
                        new { Id = 2, BillingAddress = "42 Cloud Lane, Cloud District, Middlesbrough", CompanyName = "Pie in the Sky", ContactEmail = "sally@example.com", ContactName = "Sally Pie", ContactTelephone = "01234 341245" }
                    );
                });

            modelBuilder.Entity("RebootIT.TimesheetApp.Data.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("RebootIT.TimesheetApp.Data.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new { Id = 1, Address = "4 Wonky Way, Middlesbrough", Name = "Willy's Hovel" },
                        new { Id = 2, Address = "3 Hopeless Lane, Fiddler District, Middlesbrough", Name = "Fiddler Fingers Head Office" },
                        new { Id = 3, Address = "13 Stack It Road, Storage District, Middlesbrough", Name = "Fiddler Fingers Warehouse" },
                        new { Id = 4, Address = "1 Crust Avenue, Busy District, Middlesbrough", Name = "Sally's Place" },
                        new { Id = 5, Address = "3 Crust Avenue, Busy District, Middlesbrough", Name = "Sally's Takeout" }
                    );
                });

            modelBuilder.Entity("RebootIT.TimesheetApp.Data.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Forename")
                        .IsRequired();

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Staff");

                    b.HasData(
                        new { Id = 1, Email = "tyrone.davison@example.com", Forename = "Tyrone", Surname = "Davison" },
                        new { Id = 2, Email = "zafar.khan@example.com", Forename = "Zafar", Surname = "Khan" },
                        new { Id = 3, Email = "james.fairbairn@example.com", Forename = "James", Surname = "Fairbairn" }
                    );
                });

            modelBuilder.Entity("RebootIT.TimesheetApp.Data.Timesheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("LocationId");

                    b.Property<int>("MinutesWorked");

                    b.Property<int>("StaffId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StaffId");

                    b.ToTable("Timesheets");

                    b.HasData(
                        new { Id = 1, ClientId = 2, LocationId = 4, MinutesWorked = 80, StaffId = 1 }
                    );
                });

            modelBuilder.Entity("RebootIT.TimesheetApp.Data.Timesheet", b =>
                {
                    b.HasOne("RebootIT.TimesheetApp.Data.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RebootIT.TimesheetApp.Data.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RebootIT.TimesheetApp.Data.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
